#基于官网gitlab-runner镜像，除了原生的软件没有安装任何软件。
#IMAGE：gitlab/gitlab-runner:latest

#定义全局所需要的镜像
#image: docker:latest
#image:
#  name: docker/compose:latest


before_script:
  # 这里定义了打包成功后的Docker镜像名称，每一次提交代码后构建成功的镜像名称都是唯一的
#  - export IMAGE_FULL_NAME=${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}
#  registry.cn-hangzhou.aliyuncs.com/dsz-docker/docker:[镜像版本号]

#  - export IMAGE_FULL_NAME=registry.cn-hangzhou.aliyuncs.com/dsz-docker/demo:20210715-1
#  - export gitla_runner_image=registry.cn-hangzhou.aliyuncs.com/dsz-docker/dsz-gitlab-runner:20210715-1
#  - export dsz_docker_hub=registry.cn-hangzhou.aliyuncs.com
#  - export docker_user=duanshouzhi516518
#  - export docker_pwd=dszazhy1314


image:
  name: registry.cn-hangzhou.aliyuncs.com/dsz-docker/runner-for-java:20210715-1
  entrypoint: [""]


#image: docker:latest

  #services:
#  - docker/compose:latest
#  - docker:latest
#  - maven:latest

  # 定义CI执行的阶段，这里可以自己根据情况定义多少个阶段
stages:
  - whoami
  - whoami2
  - show_env
  - build_image
  - compile
  - build
  - run


#全局变量
variables:
  MAVEN_REPO: /.m2
  PROJECT: demo
  IMAGE_FULL_NAME: registry.cn-hangzhou.aliyuncs.com/dsz-docker/demo:20210715-1
  gitla_runner_image: registry.cn-hangzhou.aliyuncs.com/dsz-docker/dsz-gitlab-runner:20210715-1
  dsz_docker_hub: registry.cn-hangzhou.aliyuncs.com
  docker_user: duanshouzhi516518
  docker_pwd: dszazhy1314



whoami:
#  image: docker:latest
  stage: whoami
  tags:
    - gw-new-docker
  script:
    - whoami
    - docker -v


whoami2:
#  image: docker/compose:latest
  stage: whoami2
  tags:
    - gw-new-docker
  script:
    - docker-compose -v


show_env_1:
  stage: show_env
  tags:
    - gw-new-docker
  script:
    - echo "测试变量配置值"
    #$test_name可以在gitlab页面上设置，此处获取
    - echo $test_name


show_env_2:
  stage: show_env
  tags:
    - gw-new-docker
  script:
    - echo "======当前环境变量======"
    - env



#构建gitlab-runner镜像
build_image:
#  image: docker:latest
  stage: build_image
  tags:
    - gw-new-docker
  script:
    - cd docker
    - docker login --username=$docker_user --password=$docker_pwd $dsz_docker_hub
    # 这里的变量就是我们全局配置定义的了
    - docker build -t $gitla_runner_image .
    - docker push $gitla_runner_image
    - rm -rf target
    - docker rmi $gitla_runner_image


  # 1、编译
compile:
#  image: maven:latest
#  image: registry.cn-hangzhou.aliyuncs.com/dsz-docker/maven:latest
  stage: compile
  allow_failure: false
  # 只在哪个分支生效
  only:
    - master
  tags:
    - gw-new-docker
  # 运行脚本
  script:
    - env
#    - $MAVEN_HOME/bin/mvn -Dmaven.repo.local=$MAVEN_REPO clean package -Dmaven.test.skip=true
#     - /usr/local/maven/apache-maven-3.6.2/bin/mvn clean package -Dmaven.test.skip=true
    - mvn -Dmaven.repo.local=$MAVEN_REPO clean package -Dmaven.test.skip=true
  # 因为是Maven编译，所以会有Jar包产物，这里定义产物的过期时间
  artifacts:
    name: $PROJECT
    expire_in: 1 days
    paths:
      - target/*.jar


# 2、构建SpringBoot镜像
build:
#  image: docker:latest
  stage: build
  script:
    # 这里的变量会自动获取你当前推送代码的gitlab用户和密码以及仓库地址
    #- docker login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker login --username=$docker_user --password=$docker_pwd $dsz_docker_hub
    # 这里的变量就是我们全局配置定义的了
    - docker build -t $IMAGE_FULL_NAME .
    - docker push $IMAGE_FULL_NAME
    - rm -rf target
    - docker rmi $IMAGE_FULL_NAME
  only:
    - master
  tags:
    - gw-new-docker


# 3、运行
run:
#  image: docker:latest
#  image: docker/compose:latest
  stage: run
  script:
    - docker stop $PROJECT || true
    - docker rm $PROJECT || true
#    - docker-compose down
    - docker-compose up -d
  only:
    - master
  tags:
    - gw-new-docker